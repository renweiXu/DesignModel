#工厂模式
	首先,使用工厂模式是为了解耦，把创建对象的过程和调用对象方法的过程分开，就是在Class A里面想调用Class B里面的方法
	可以先把创建B对象实例的创建过程放到工厂里面去实现，A只管调用B的方法就可以了，无须关心B对象实例是怎么创建的;
	其次,这样可以减少代码的重复,如果创建B对象实例的过程比较复杂,需要一定代码量,并且在很多地方都需要创建B对象,那么我们就可以
	把B对象实例化交给工厂类去实现,既减少了代码重复率,又方便后期对B对象实例化过程的维护和修改;
	由于创建的过程都是由工厂统一管理的,如果创建对象的逻辑发生变化，我们只需在工厂里面修改创建对象的业务逻辑即可,降低了维护成本;
	使用者只需调用B对象的方法即可，不需要了解B对象创建的业务逻辑.
	